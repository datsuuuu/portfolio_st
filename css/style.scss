@charset "utf-8";

/*=========================================
# mixin
=========================================*/

//マップ型変数breakpointsを定義
$breakpoints: (
//キー　　値
  'sp': 'screen and (max-width: 767px)', //767px以下（スマホ）用の表示
  'md': 'screen and (min-width: 768px)' //768px以上（タブレット・PC）用の表示
) !default;

//メディアクエリ用のmixinを定義。デフォ値はmd
@mixin mq($breakpoint: md) {
//map-get(マップ型変数, キー)で値を取得
  @media #{map-get($breakpoints, $breakpoint)} {
    //この中をカスタムできる
    @content;
  }
}

/*このように @media screen and (width: 767px) { } を書かなくても、
PC用のcssを書きながらスマホ用の表示を書き足すことができます！ */



/*=========================================
# color
=========================================*/

$primary-color:#d1bb95;
$font-color:#333;





/*=========================================
# common
=========================================*/

 @include mq(md) {
     .is-sp {
         display: none;
     }
 }

 @include mq(sp) {
    .is-md {
        display: none;
    }
}

body {
    font-size: 16px;
    color: $font-color;
    font-family: "ヒラギノ明朝, ProN", serif;
    line-height: 1.6785;
}

img {
    width: 100%;
}

.inner {
    max-width:1000px;
    margin: 0 auto;
    padding: 0 40px;
    //reset.cssでbox-sizingを指定しているので、paddingを含めて１２００pxになってしまっている。
    //この場合、しっかりpaddingはついているものの要素が指定したよりも小さくなるという弊害がある。（padding分を引くから）
    box-sizing: content-box;
    //そのためデフォルトのcontent-boxに戻す。

    @include mq(sp) {
        padding: 0 15px;
    }
}

.section {
    margin-top: 160px;

    @include mq(sp) {
        margin-top: 96px;
    }
}


//top

.top {
    padding-top: 130px;
    padding-bottom: 100px;

    @include mq(sp) {
     padding-top: 60px;
     padding-bottom: 40px;
    }

}

.top_inner {
   margin: auto;
   padding-left: 50px;
   padding-right: 50px;
   text-align: center;
   justify-content: center;
   display: flex;

    h2 {
        font-size: 30px;
        letter-spacing: 15px;

        @include mq(sp) {
            font-size: 15px;
        letter-spacing: 5px;
    }

}

}



//center

.center {
    padding-bottom: 100px;

    .cen_inner {
        display: flex;
       justify-content: space-evenly;
       flex-wrap: wrap;

            .work {
                cursor: pointer;
                opacity: .7;
                transition: all 1s;

                &:hover {
                    opacity: 1;
                }
            }
    }
}

